<?php
function activity_to_group_civicrm_post( $op, $objectName, $objectId, &$objectRef )
{
	// If this is a new contribution
	if ($op == 'create' && $objectName == 'Contribution')
	{	
		// Load up the parameter
		$params = array(
			'version' => 3,
			'contribution_id' => $objectId,
		);
  		$result = civicrm_api('contribution','get',$params );

		// Recurring payment or old style recurring payment, whichever, lets set new InvoiceID
		if($result['values'][$objectId]['invoice_id'] != NULL)
		{
			$newInvoiceID = $result['values'][$objectId]['invoice_id'];
		}
		else
		{
			$newInvoiceID = $objectId ;
		}
		
		//If this isn't a recurring payment
		if($result['values'][$objectId]['contribution_recur_id'] == NULL)
		{
			$messageTemplateID = 51; // CLIENT SPECIFIC
			
			$updateParams = array(
 				'version' => 3,
 				'id' => $objectId,
 				'invoice_id' => $newInvoiceID,
 				'receipt_date' => date('Ymd'),
				'thankyou_date' => date('Ymd'),
 			);

 			$updateResult = civicrm_api( 'contribution','update',$updateParams );
		}
		else
		// If this is a recurring payment
		{
			$messageTemplateID = 50; // CLIENT SPECIFIC
			
			$updateParams = array(
 				'version' => 3,
 				'id' => $objectId,
 				'invoice_id' => $objectId . '(r)',
 				'contribution_status_id' => 1,
  				'receipt_date' => date('Ymd'),
				'thankyou_date' => date('Ymd'),				
 			);
 			
 			$updateResult = civicrm_api( 'contribution','update',$updateParams );

		}
		
		// CLIENT SPECIFIC, don't send any receipts if the payments were entered manually as the result of particular payment instruments or if for some reason a receipt has already been sent or approved.
		$dontSend = array(8,7);
 		if(
 			($updateResult['values'][$objectId]['contribution_status_id'] == 1) && ($updateResult['values'][$objectId]['receipt_date'] != NULL) && (!in_array($updateResult['values'][$objectId]['payment_instrument_id'],$dontSend))
 			
 			)
 		{	
	    	require_once 'CRM/Core/BAO/MessageTemplates.php' ;
			$msgParams = array(
				'id' => $messageTemplateID,
			);
			
			$receiptEmail = CRM_Core_BAO_MessageTemplates::retrieve($msgParams,$updateResult['values']) ; // Populat the email object
			
			// get the contribution record
			$params = array(
				'version' => 3,
				'contribution_id' => $objectId,
			);
  			$updatedResult = civicrm_api( 'contribution','get',$params );
			
			// Record email activity
			require_once 'CRM/Activity/BAO/Activity.php';
		
			// Populate values for the email
			$contactIDs = array('id' => $values['contact_id']) ;
         	$emailAddress = civicrm_api('contact','get',array('contact_id' => $updatedResult['values'][$objectId]['contact_id'],'version' => 3)) ;
     		
     		// Manually override the values in the message template
      	 	$body = str_replace('{$formValues.date}', $updatedResult['values'][$objectId]['receipt_date'], $receiptEmail->msg_html);
			$body = str_replace('{$formValues.invoice_id}', $updatedResult['values'][$objectId]['invoice_id'], $body);
			$body = str_replace('{$formValues.total_amount}', '$'.$updatedResult['values'][$objectId]['total_amount'], $body);
		
			$contacts = array($updatedResult['values'][$objectId]['contact_id']) ;

			// Send the email
			$sendEmail = CRM_Activity_BAO_Activity::sendEmail(
				$emailAddress['values'],
				$receiptEmail->msg_subject,
				$receiptEmail->msg_text,
				$body,
				$emailAddress['values'][$updatedResult['values'][$objectId]['contact_id']]['email'],
				xx, // CLIENT SPECIFIC, activity needs to match to source contact
				'email',// CLIENT SPECIFIC, from email address
				null,
				'email',// CLIENT SPECIFIC, cc email
				null,
				$contacts
			);
		
			// Add all donors to a group		
			$sourceParams = array(
				'contact_id' => $updatedResult['values'][$objectId]['contact_id'],		
				'group_id' => 317, // CLIENT SPECIFIC
				'version' => 3,
			);
			$sourceResult = civicrm_api( 'group_contact','create',$sourceParams );
		}
	}
}